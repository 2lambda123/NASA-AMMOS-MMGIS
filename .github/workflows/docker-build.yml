name: Docker build and push

# limit concurrency
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#examples-using-concurrency-and-the-default-behavior
concurrency: docker_mmgis_main

on:
  push:
    # Only activate for `master` branch
    branches:
      - master
    # Plus for all tags
    tags:
      - '*'

  # Plus for any pull-requests
  pull_request:

env:
  # Will be "NASA-AMMOS/MMGIS" for the main repo, for forks "user-name-of-fork/MMGIS"
  # For generating the tag, all will be converted to lowercase
  IMAGE_SLUG: ${{ github.repository }}

jobs:
  # Push image to GitHub Container Registry.
  # The image tag pattern is:
  # for pull-requests: <PATCH_VERSION>-<DATE>-<PR_NUMBER>, eg: 1.35.2-20210125-25
  # for tags: <TAG>
  # for `master` branch: latest,<PATCH_VERSION>-latest,<MINOR_VERSION>-latest,<MAJOR_VERSION>-latest,<PATCH_VERSION>-<DATE>-<SHA>
  # Version is parsed from package.json
  push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main

      -
        name: Generate tags
        id: generate
        run: |

          # Image ID
          IMAGE_ID=ghcr.io/$IMAGE_SLUG

          # Date
          BDATE=$(date +%Y%m%d)

          # PATCH_VERSION from package.json is like "1.2.3"
          # MINOR_VERSION like "1.2", MAJOR_VERSION like "1"
          PATCH_VERSION=${{ steps.package-version.outputs.current-version}}
          MINOR_VERSION=${PATCH_VERSION%.*}
          MAJOR_VERSION=${MINOR_VERSION%.*}

          # Change all uppercase to lowercase, just in case
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version and use it as suffix for version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # For pull requests just extract the PR number
          PR_NUMBER=""
          [ "${{ github.event_name }}" == "pull_request" ] && VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\)/merge,\1,')
          [ "${{ github.event_name }}" == "pull_request" ] && PR_NUMBER=$VERSION

          # Append version
          [ "${{ github.event_name }}" == "pull_request" ] && VERSION=$PATCH_VERSION-$BDATE-$VERSION

          # Strip "v" prefix from tag name if it's a tag
          # [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention if it's a master branch build
          [ "$VERSION" == "master" ] && VERSION=latest

          # Compose REGISTRY_TAGS variable
          REGISTRY_TAGS=-t $IMAGE_ID:$VERSION

          # For master branch also supply an extra tag: <PATCH_VERSION>-latest,<MINOR_VERSION>-latest,<MAJOR_VERSION>-latest,<PATCH_VERSION>-<DATE>-<SHA>
          [ "$VERSION" == "latest" ] && REGISTRY_TAGS=$REGISTRY_TAGS -t $IMAGE_ID:$PATCH_VERSION-latest -t $IMAGE_ID:$MINOR_VERSION-latest -t $IMAGE_ID:$MAJOR_VERSION-latest -t $IMAGE_ID:$PATCH_VERSION-$BDATE-$(git rev-parse --short HEAD)

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          echo REGISTRY_TAGS=$REGISTRY_TAGS
          echo headref=${{ github.head_ref }}

          SHA_SHORT=${{ github.sha }}
          [ "${{ github.event_name }}" == "pull_request" ] && SHA_SHORT=$(echo ${{ github.event.pull_request.head.sha }} | cut -c1-8)

          echo "Final image tag to be pushed:"
          echo $REGISTRY_TAGS
          echo "REGISTRY_TAGS=$REGISTRY_TAGS" >> $GITHUB_OUTPUT
          echo "REGISTRY_TAGS_VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "REGISTRY_TAGS_PR_NUMBER=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "SHA_SHORT=$SHA_SHORT" >> $GITHUB_OUTPUT
      # -
      #   name: Set up QEMU
      #   uses: docker/setup-qemu-action@v1
      # -
      #   name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2
      #   with:
      #     install: true
      # -
      #   name: Cache Docker layers
      #   uses: actions/cache@v3
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64, linux/arm64
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new
          tags: ${{ steps.generate.outputs.REGISTRY_TAGS }}

      - run: docker build $REGISTRY_TAGS .

      # -
      #   # https://github.com/docker/build-push-action/issues/252
      #   # https://github.com/moby/buildkit/issues/1896
      #   name: Move cache
      #   run: |
      #     rm -rf /tmp/.buildx-cache
      #     mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      # -
      #   name: Image digest
      #   run: echo ${{ steps.docker_build.outputs.digest }}
      # -
      #   name: Image tags debug
      #   run: echo ${{ steps.generate.outputs.REGISTRY_TAGS }}
